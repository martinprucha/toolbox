// this build script contains examples from https://docs.gradle.org/current/userguide/tutorial_using_tasks.html

plugins {
    id 'java'
}

tasks.register('hello') {
    doLast {
        println 'Hello world!'
    }
}

tasks.register('upper') {
    doLast {
        String someString = 'mY_nAmE'
        println "Original: $someString"
        println "Upper case: ${someString.toUpperCase()}"
    }
}

tasks.register('count') {
    doLast {
        4.times { print "$it " }
    }
}

// task dependencies
tasks.register('intro') {
    dependsOn tasks.hello
    doLast {
        println "I'm Gradle"
    }
}

tasks.register('taskX') {
    dependsOn 'taskY'
    doLast {
        println 'taskX'
    }
}

tasks.register('taskY') {
    doLast {
        println 'taskY'
    }
}

// flexible task registration
4.times { counter ->
    tasks.register("task$counter") {
        doLast {
            println "I'm task number $counter"
        }
    }
}

// manipulating existing tasks
tasks.named('task0') { dependsOn('task2', 'task3') }

// modifying behavior of existing tasks
tasks.named('hello') {
    doLast {
        println 'Hello Earth'
    }
}
tasks.named('hello') {
    doFirst {
        println 'Hello Venus'
    }
}
tasks.named('hello') {
    doLast {
        println 'Hello Mars'
    }
}
tasks.named('hello') {
    doLast {
        println 'Hello Jupiter'
    }
}

// logging test
tasks.register('logging_test') {
    doLast {
        logger.quiet('An info log message which is always logged.')
        logger.error('An error log message.')
        logger.warn('A warning log message.')
        logger.lifecycle('A lifecycle info log message.')
        logger.info('An info log message.')
        logger.debug('A debug log message.')
        logger.trace('A trace log message.') // Gradle never logs TRACE level logs
        logger.lifecycle('A parametrized {} log message', 'info') // parametrized message
    }
}